{"ast":null,"code":"var _jsxFileName = \"/Users/seongjehun/Desktop/study/express/dreamCoding/backEndLecture/12.dwitter/client/src/components/Tweets.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Banner from './Banner';\nimport NewTweetForm from './NewTweetForm';\nimport TweetCard from './TweetCard';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Tweets = /*#__PURE__*/memo(_c = _s(({\n  tweetService,\n  username,\n  addable\n}) => {\n  _s();\n\n  const [tweets, setTweets] = useState([]);\n  const [error, setError] = useState('');\n  const history = useHistory();\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    console.log(username);\n    tweetService.getTweets(username).then(tweets => setTweets([...tweets])).catch(onError);\n  }, [tweetService, username, user]);\n\n  const onCreated = tweet => {\n    setTweets(tweets => [tweet, ...tweets]);\n  };\n\n  const onDelete = tweetId => tweetService.deleteTweet(tweetId).then(() => setTweets(tweets => tweets.filter(tweet => tweet.id !== tweetId))).catch(error => setError(error.toString()));\n\n  const onUpdate = (tweetId, text) => tweetService.updateTweet(tweetId, text).then(updated => setTweets(tweets => tweets.map(item => item.id === updated.id ? updated : item))).catch(error => error.toString());\n\n  const onUsernameClick = tweet => history.push(`/${tweet.username}`);\n\n  const onError = error => {\n    setError(error.toString());\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [addable && /*#__PURE__*/_jsxDEV(NewTweetForm, {\n      tweetService: tweetService,\n      onError: onError,\n      onCreated: onCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Banner, {\n      text: error,\n      isAlert: true,\n      transient: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), tweets.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"tweets-empty\",\n      children: \"No Tweets Yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"tweets\",\n      children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(TweetCard, {\n        tweet: tweet,\n        owner: tweet.username === user.username,\n        onDelete: onDelete,\n        onUpdate: onUpdate,\n        onUsernameClick: onUsernameClick\n      }, tweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}, \"E9YcZYjR0TGX4AVylP/JikZJs2Q=\", false, function () {\n  return [useHistory, useAuth];\n}));\n_c2 = Tweets;\nexport default Tweets;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tweets$memo\");\n$RefreshReg$(_c2, \"Tweets\");","map":{"version":3,"sources":["/Users/seongjehun/Desktop/study/express/dreamCoding/backEndLecture/12.dwitter/client/src/components/Tweets.jsx"],"names":["React","memo","useEffect","useState","useHistory","Banner","NewTweetForm","TweetCard","useAuth","Tweets","tweetService","username","addable","tweets","setTweets","error","setError","history","user","console","log","getTweets","then","catch","onError","onCreated","tweet","onDelete","tweetId","deleteTweet","filter","id","toString","onUpdate","text","updateTweet","updated","map","item","onUsernameClick","push","setTimeout","length"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Banner from './Banner';\nimport NewTweetForm from './NewTweetForm';\nimport TweetCard from './TweetCard';\nimport { useAuth } from '../context/AuthContext';\n\nconst Tweets = memo(({ tweetService, username, addable }) => {\n  const [tweets, setTweets] = useState([]);\n  const [error, setError] = useState('');\n  const history = useHistory();\n  const { user } = useAuth();\n\n  useEffect(() => {\n    console.log(username);\n    tweetService\n      .getTweets(username)\n      .then((tweets) => setTweets([...tweets]))\n      .catch(onError);\n  }, [tweetService, username, user]);\n\n  const onCreated = (tweet) => {\n    setTweets((tweets) => [tweet, ...tweets]);\n  };\n\n  const onDelete = (tweetId) =>\n    tweetService\n      .deleteTweet(tweetId)\n      .then(() =>\n        setTweets((tweets) => tweets.filter((tweet) => tweet.id !== tweetId))\n      )\n      .catch((error) => setError(error.toString()));\n\n  const onUpdate = (tweetId, text) =>\n    tweetService\n      .updateTweet(tweetId, text)\n      .then((updated) =>\n        setTweets((tweets) =>\n          tweets.map((item) => (item.id === updated.id ? updated : item))\n        )\n      )\n      .catch((error) => error.toString());\n\n  const onUsernameClick = (tweet) => history.push(`/${tweet.username}`);\n\n  const onError = (error) => {\n    setError(error.toString());\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  };\n\n  return (\n    <>\n      {addable && (\n        <NewTweetForm\n          tweetService={tweetService}\n          onError={onError}\n          onCreated={onCreated}\n        />\n      )}\n      {error && <Banner text={error} isAlert={true} transient={true} />}\n      {tweets.length === 0 && <p className='tweets-empty'>No Tweets Yet</p>}\n      <ul className='tweets'>\n        {tweets.map((tweet) => (\n          <TweetCard\n            key={tweet.id}\n            tweet={tweet}\n            owner={tweet.username === user.username}\n            onDelete={onDelete}\n            onUpdate={onUpdate}\n            onUsernameClick={onUsernameClick}\n          />\n        ))}\n      </ul>\n    </>\n  );\n});\nexport default Tweets;\n"]},"metadata":{},"sourceType":"module"}